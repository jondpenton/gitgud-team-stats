// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `
  type AggregatePlayer {
    count: Int!
  }

  type AggregateTeam {
    count: Int!
  }

  type BatchPayload {
    count: Long!
  }

  scalar DateTime

  scalar Long

  type Mutation {
    createPlayer(data: PlayerCreateInput!): Player!
    updatePlayer(
      data: PlayerUpdateInput!
      where: PlayerWhereUniqueInput!
    ): Player
    updateManyPlayers(
      data: PlayerUpdateManyMutationInput!
      where: PlayerWhereInput
    ): BatchPayload!
    upsertPlayer(
      where: PlayerWhereUniqueInput!
      create: PlayerCreateInput!
      update: PlayerUpdateInput!
    ): Player!
    deletePlayer(where: PlayerWhereUniqueInput!): Player
    deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
    createTeam(data: TeamCreateInput!): Team!
    updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
    updateManyTeams(
      data: TeamUpdateManyMutationInput!
      where: TeamWhereInput
    ): BatchPayload!
    upsertTeam(
      where: TeamWhereUniqueInput!
      create: TeamCreateInput!
      update: TeamUpdateInput!
    ): Team!
    deleteTeam(where: TeamWhereUniqueInput!): Team
    deleteManyTeams(where: TeamWhereInput): BatchPayload!
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  interface Node {
    id: ID!
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Player {
    id: ID!
    bnet: String!
    discord: String!
    role: Role!
    sr: Int
    team: Team
  }

  type PlayerConnection {
    pageInfo: PageInfo!
    edges: [PlayerEdge]!
    aggregate: AggregatePlayer!
  }

  input PlayerCreateInput {
    id: ID
    bnet: String!
    discord: String!
    role: Role!
    sr: Int
    team: TeamCreateOneWithoutPlayersInput
  }

  input PlayerCreateManyWithoutTeamInput {
    create: [PlayerCreateWithoutTeamInput!]
    connect: [PlayerWhereUniqueInput!]
  }

  input PlayerCreateWithoutTeamInput {
    id: ID
    bnet: String!
    discord: String!
    role: Role!
    sr: Int
  }

  type PlayerEdge {
    node: Player!
    cursor: String!
  }

  enum PlayerOrderByInput {
    id_ASC
    id_DESC
    bnet_ASC
    bnet_DESC
    discord_ASC
    discord_DESC
    role_ASC
    role_DESC
    sr_ASC
    sr_DESC
  }

  type PlayerPreviousValues {
    id: ID!
    bnet: String!
    discord: String!
    role: Role!
    sr: Int
  }

  input PlayerScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    bnet: String
    bnet_not: String
    bnet_in: [String!]
    bnet_not_in: [String!]
    bnet_lt: String
    bnet_lte: String
    bnet_gt: String
    bnet_gte: String
    bnet_contains: String
    bnet_not_contains: String
    bnet_starts_with: String
    bnet_not_starts_with: String
    bnet_ends_with: String
    bnet_not_ends_with: String
    discord: String
    discord_not: String
    discord_in: [String!]
    discord_not_in: [String!]
    discord_lt: String
    discord_lte: String
    discord_gt: String
    discord_gte: String
    discord_contains: String
    discord_not_contains: String
    discord_starts_with: String
    discord_not_starts_with: String
    discord_ends_with: String
    discord_not_ends_with: String
    role: Role
    role_not: Role
    role_in: [Role!]
    role_not_in: [Role!]
    sr: Int
    sr_not: Int
    sr_in: [Int!]
    sr_not_in: [Int!]
    sr_lt: Int
    sr_lte: Int
    sr_gt: Int
    sr_gte: Int
    AND: [PlayerScalarWhereInput!]
    OR: [PlayerScalarWhereInput!]
    NOT: [PlayerScalarWhereInput!]
  }

  type PlayerSubscriptionPayload {
    mutation: MutationType!
    node: Player
    updatedFields: [String!]
    previousValues: PlayerPreviousValues
  }

  input PlayerSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: PlayerWhereInput
    AND: [PlayerSubscriptionWhereInput!]
    OR: [PlayerSubscriptionWhereInput!]
    NOT: [PlayerSubscriptionWhereInput!]
  }

  input PlayerUpdateInput {
    bnet: String
    discord: String
    role: Role
    sr: Int
    team: TeamUpdateOneWithoutPlayersInput
  }

  input PlayerUpdateManyDataInput {
    bnet: String
    discord: String
    role: Role
    sr: Int
  }

  input PlayerUpdateManyMutationInput {
    bnet: String
    discord: String
    role: Role
    sr: Int
  }

  input PlayerUpdateManyWithoutTeamInput {
    create: [PlayerCreateWithoutTeamInput!]
    delete: [PlayerWhereUniqueInput!]
    connect: [PlayerWhereUniqueInput!]
    set: [PlayerWhereUniqueInput!]
    disconnect: [PlayerWhereUniqueInput!]
    update: [PlayerUpdateWithWhereUniqueWithoutTeamInput!]
    upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput!]
    deleteMany: [PlayerScalarWhereInput!]
    updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  }

  input PlayerUpdateManyWithWhereNestedInput {
    where: PlayerScalarWhereInput!
    data: PlayerUpdateManyDataInput!
  }

  input PlayerUpdateWithoutTeamDataInput {
    bnet: String
    discord: String
    role: Role
    sr: Int
  }

  input PlayerUpdateWithWhereUniqueWithoutTeamInput {
    where: PlayerWhereUniqueInput!
    data: PlayerUpdateWithoutTeamDataInput!
  }

  input PlayerUpsertWithWhereUniqueWithoutTeamInput {
    where: PlayerWhereUniqueInput!
    update: PlayerUpdateWithoutTeamDataInput!
    create: PlayerCreateWithoutTeamInput!
  }

  input PlayerWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    bnet: String
    bnet_not: String
    bnet_in: [String!]
    bnet_not_in: [String!]
    bnet_lt: String
    bnet_lte: String
    bnet_gt: String
    bnet_gte: String
    bnet_contains: String
    bnet_not_contains: String
    bnet_starts_with: String
    bnet_not_starts_with: String
    bnet_ends_with: String
    bnet_not_ends_with: String
    discord: String
    discord_not: String
    discord_in: [String!]
    discord_not_in: [String!]
    discord_lt: String
    discord_lte: String
    discord_gt: String
    discord_gte: String
    discord_contains: String
    discord_not_contains: String
    discord_starts_with: String
    discord_not_starts_with: String
    discord_ends_with: String
    discord_not_ends_with: String
    role: Role
    role_not: Role
    role_in: [Role!]
    role_not_in: [Role!]
    sr: Int
    sr_not: Int
    sr_in: [Int!]
    sr_not_in: [Int!]
    sr_lt: Int
    sr_lte: Int
    sr_gt: Int
    sr_gte: Int
    team: TeamWhereInput
    AND: [PlayerWhereInput!]
    OR: [PlayerWhereInput!]
    NOT: [PlayerWhereInput!]
  }

  input PlayerWhereUniqueInput {
    id: ID
    bnet: String
    discord: String
  }

  type Query {
    player(where: PlayerWhereUniqueInput!): Player
    players(
      where: PlayerWhereInput
      orderBy: PlayerOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Player]!
    playersConnection(
      where: PlayerWhereInput
      orderBy: PlayerOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): PlayerConnection!
    team(where: TeamWhereUniqueInput!): Team
    teams(
      where: TeamWhereInput
      orderBy: TeamOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Team]!
    teamsConnection(
      where: TeamWhereInput
      orderBy: TeamOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): TeamConnection!
    node(id: ID!): Node
  }

  enum Role {
    MAIN_TANK
    OFF_TANK
    HITSCAN_DPS
    PROJECTILE_DPS
    MAIN_SUPPORT
    FLEX_SUPPORT
    SUB
    PLAYER
  }

  type Subscription {
    player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
    team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  }

  type Team {
    id: ID!
    losses: Int
    name: String!
    players(
      where: PlayerWhereInput
      orderBy: PlayerOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Player!]
    pointDifference: Int
    slug: String!
    ties: Int
    updatedAt: DateTime!
    wins: Int
  }

  type TeamConnection {
    pageInfo: PageInfo!
    edges: [TeamEdge]!
    aggregate: AggregateTeam!
  }

  input TeamCreateInput {
    id: ID
    losses: Int
    name: String!
    players: PlayerCreateManyWithoutTeamInput
    pointDifference: Int
    slug: String!
    ties: Int
    wins: Int
  }

  input TeamCreateOneWithoutPlayersInput {
    create: TeamCreateWithoutPlayersInput
    connect: TeamWhereUniqueInput
  }

  input TeamCreateWithoutPlayersInput {
    id: ID
    losses: Int
    name: String!
    pointDifference: Int
    slug: String!
    ties: Int
    wins: Int
  }

  type TeamEdge {
    node: Team!
    cursor: String!
  }

  enum TeamOrderByInput {
    id_ASC
    id_DESC
    losses_ASC
    losses_DESC
    name_ASC
    name_DESC
    pointDifference_ASC
    pointDifference_DESC
    slug_ASC
    slug_DESC
    ties_ASC
    ties_DESC
    updatedAt_ASC
    updatedAt_DESC
    wins_ASC
    wins_DESC
  }

  type TeamPreviousValues {
    id: ID!
    losses: Int
    name: String!
    pointDifference: Int
    slug: String!
    ties: Int
    updatedAt: DateTime!
    wins: Int
  }

  type TeamSubscriptionPayload {
    mutation: MutationType!
    node: Team
    updatedFields: [String!]
    previousValues: TeamPreviousValues
  }

  input TeamSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: TeamWhereInput
    AND: [TeamSubscriptionWhereInput!]
    OR: [TeamSubscriptionWhereInput!]
    NOT: [TeamSubscriptionWhereInput!]
  }

  input TeamUpdateInput {
    losses: Int
    name: String
    players: PlayerUpdateManyWithoutTeamInput
    pointDifference: Int
    slug: String
    ties: Int
    wins: Int
  }

  input TeamUpdateManyMutationInput {
    losses: Int
    name: String
    pointDifference: Int
    slug: String
    ties: Int
    wins: Int
  }

  input TeamUpdateOneWithoutPlayersInput {
    create: TeamCreateWithoutPlayersInput
    update: TeamUpdateWithoutPlayersDataInput
    upsert: TeamUpsertWithoutPlayersInput
    delete: Boolean
    disconnect: Boolean
    connect: TeamWhereUniqueInput
  }

  input TeamUpdateWithoutPlayersDataInput {
    losses: Int
    name: String
    pointDifference: Int
    slug: String
    ties: Int
    wins: Int
  }

  input TeamUpsertWithoutPlayersInput {
    update: TeamUpdateWithoutPlayersDataInput!
    create: TeamCreateWithoutPlayersInput!
  }

  input TeamWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    losses: Int
    losses_not: Int
    losses_in: [Int!]
    losses_not_in: [Int!]
    losses_lt: Int
    losses_lte: Int
    losses_gt: Int
    losses_gte: Int
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    players_every: PlayerWhereInput
    players_some: PlayerWhereInput
    players_none: PlayerWhereInput
    pointDifference: Int
    pointDifference_not: Int
    pointDifference_in: [Int!]
    pointDifference_not_in: [Int!]
    pointDifference_lt: Int
    pointDifference_lte: Int
    pointDifference_gt: Int
    pointDifference_gte: Int
    slug: String
    slug_not: String
    slug_in: [String!]
    slug_not_in: [String!]
    slug_lt: String
    slug_lte: String
    slug_gt: String
    slug_gte: String
    slug_contains: String
    slug_not_contains: String
    slug_starts_with: String
    slug_not_starts_with: String
    slug_ends_with: String
    slug_not_ends_with: String
    ties: Int
    ties_not: Int
    ties_in: [Int!]
    ties_not_in: [Int!]
    ties_lt: Int
    ties_lte: Int
    ties_gt: Int
    ties_gte: Int
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    wins: Int
    wins_not: Int
    wins_in: [Int!]
    wins_not_in: [Int!]
    wins_lt: Int
    wins_lte: Int
    wins_gt: Int
    wins_gte: Int
    AND: [TeamWhereInput!]
    OR: [TeamWhereInput!]
    NOT: [TeamWhereInput!]
  }

  input TeamWhereUniqueInput {
    id: ID
    name: String
    slug: String
  }
`;
